name: release
on: [push, pull_request]
# on:
#   push:
#     tags:
#       - '*'

jobs:
  setup:
    runs-on: windows-2019
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
  
  vs2019-opencv4:
    runs-on: windows-2019
    env:
      OPENCV_VERSION: 4.5.1
      PACKAGENAME: opencv-4.5.1-vc16-minimal
    steps:
    - uses: actions/checkout@v2
    - name: opencv-source
      run: |
        Invoke-WebRequest -Uri https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -OutFile opencv-${{ env.OPENCV_VERSION }}.zip
        7z x ./opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        Remove-Item 'modules\gapi' -Recurse
    - name: build-vs2019-x64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-vs2019-x64 && cd build-vs2019-x64
        call cmake .. -G "Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX=install -D BUILD_LIST=core -D CV_DISABLE_OPTIMIZATION=ON ^
        -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF -D BUILD_opencv_python2=OFF -D BUILD_opencv_python3=OFF -D BUILD_EXAMPLES=OFF
        cmake --build . --config Release -j 2
        cmake --install . --config Release
    - name: build-vs2019-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-vs2019-x86 && cd build-vs2019-x86
        call cmake .. -G "Visual Studio 16 2019" -A Win32 -DCMAKE_INSTALL_PREFIX=install -D BUILD_LIST=core -D CV_DISABLE_OPTIMIZATION=ON ^
        -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF -D BUILD_opencv_python2=OFF -D BUILD_opencv_python3=OFF -D BUILD_EXAMPLES=OFF
        cmake --build . --config Release -j 2
        cmake --install . --config Release
    - name: package
      run: |
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip
  
  release:
    needs: [setup, vs2019-opencv4]
    runs-on: windows-2019
    steps:
    - name: download
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.setup.outputs.VERSION }}
        release_name: Release ${{ needs.setup.outputs.VERSION }}
        draft: false
        prerelease: false
    
    - name: upload-vs2019
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: ${{ env.PACKAGENAME }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip